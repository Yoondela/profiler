openapi: 3.0.0
info:
  title: Profiler API
  version: 1.0.0
  description: >
    Profiler backend API documentation.

    This API powers user accounts, profiles, and service bookings.
servers:
  - url: http://localhost:3000/api
    description: Local development server

tags:
  - name: Users
    description: Manage users
  - name: Profiles
    description: Manage user profiles
  - name: Bookings
    description: Manage service bookings

paths:
  /users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      summary: Create a new user
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserInput"
      responses:
        "201":
          description: Created user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/{id}:
    get:
      summary: Get a user by ID
      tags: [Users]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User not found

  /profiles:
    get:
      summary: Get all profiles
      tags: [Profiles]
      responses:
        "200":
          description: List of profiles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Profile"

    post:
      summary: Create a new profile
      tags: [Profiles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProfileInput"
      responses:
        "201":
          description: Created profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"

  /profiles/{id}:
    get:
      summary: Get a profile by ID
      tags: [Profiles]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Profile details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "404":
          description: Profile not found

  /bookings:
    get:
      summary: Get all bookings
      tags: [Bookings]
      responses:
        "200":
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceBooking"

    post:
      summary: Create a new booking
      tags: [Bookings]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceBookingInput"
      responses:
        "201":
          description: Created booking
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceBooking"

  /bookings/{id}:
    get:
      summary: Get a booking by ID
      tags: [Bookings]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Booking details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceBooking"
        "404":
          description: Booking not found

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 67050b5d8fa2a4e35c7f88a1
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com
        createdAt:
          type: string
          format: date-time
          example: 2025-10-08T12:34:56Z

    UserInput:
      type: object
      required: [name, email]
      properties:
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john@example.com

    Profile:
      type: object
      properties:
        id:
          type: string
        user:
          type: string
          description: User ID reference
        phone:
          type: string
        bio:
          type: string
        createdAt:
          type: string
          format: date-time

    ProfileInput:
      type: object
      required: [user, phone]
      properties:
        user:
          type: string
          example: 67050b5d8fa2a4e35c7f88a1
        phone:
          type: string
          example: "+27 71 123 4567"
        bio:
          type: string
          example: Experienced house cleaner available in East London.

    ServiceBooking:
      type: object
      properties:
        id:
          type: string
        client:
          type: string
        provider:
          type: string
        serviceType:
          type: string
        status:
          type: string
          enum: [pending, confirmed, cancelled, completed]
        description:
          type: string
        forDate:
          type: string
          format: date
        forAddress:
          type: string
        createdAt:
          type: string
          format: date-time

    ServiceBookingInput:
      type: object
      required: [client, provider, serviceType]
      properties:
        client:
          type: string
          example: 67050b5d8fa2a4e35c7f88a1
        provider:
          type: string
          example: 67050b5d8fa2a4e35c7f88b9
        serviceType:
          type: string
          example: Plumbing
        description:
          type: string
          example: Fix leaking kitchen tap.
        forDate:
          type: string
          format: date
          example: 2025-10-15
        forAddress:
          type: string
          example: 123 Main Street
